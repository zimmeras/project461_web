# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.package_metadata import PackageMetadata  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class PackageHistoryEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user: User=None, _date: datetime=None, package_metadata: PackageMetadata=None, action: str=None):  # noqa: E501
        """PackageHistoryEntry - a model defined in Swagger

        :param user: The user of this PackageHistoryEntry.  # noqa: E501
        :type user: User
        :param _date: The _date of this PackageHistoryEntry.  # noqa: E501
        :type _date: datetime
        :param package_metadata: The package_metadata of this PackageHistoryEntry.  # noqa: E501
        :type package_metadata: PackageMetadata
        :param action: The action of this PackageHistoryEntry.  # noqa: E501
        :type action: str
        """
        self.swagger_types = {
            'user': User,
            '_date': datetime,
            'package_metadata': PackageMetadata,
            'action': str
        }

        self.attribute_map = {
            'user': 'User',
            '_date': 'Date',
            'package_metadata': 'PackageMetadata',
            'action': 'Action'
        }
        self._user = user
        self.__date = _date
        self._package_metadata = package_metadata
        self._action = action

    @classmethod
    def from_dict(cls, dikt) -> 'PackageHistoryEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PackageHistoryEntry of this PackageHistoryEntry.  # noqa: E501
        :rtype: PackageHistoryEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self) -> User:
        """Gets the user of this PackageHistoryEntry.


        :return: The user of this PackageHistoryEntry.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user: User):
        """Sets the user of this PackageHistoryEntry.


        :param user: The user of this PackageHistoryEntry.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def _date(self) -> datetime:
        """Gets the _date of this PackageHistoryEntry.

        Date of activity.  # noqa: E501

        :return: The _date of this PackageHistoryEntry.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date: datetime):
        """Sets the _date of this PackageHistoryEntry.

        Date of activity.  # noqa: E501

        :param _date: The _date of this PackageHistoryEntry.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def package_metadata(self) -> PackageMetadata:
        """Gets the package_metadata of this PackageHistoryEntry.


        :return: The package_metadata of this PackageHistoryEntry.
        :rtype: PackageMetadata
        """
        return self._package_metadata

    @package_metadata.setter
    def package_metadata(self, package_metadata: PackageMetadata):
        """Sets the package_metadata of this PackageHistoryEntry.


        :param package_metadata: The package_metadata of this PackageHistoryEntry.
        :type package_metadata: PackageMetadata
        """
        if package_metadata is None:
            raise ValueError("Invalid value for `package_metadata`, must not be `None`")  # noqa: E501

        self._package_metadata = package_metadata

    @property
    def action(self) -> str:
        """Gets the action of this PackageHistoryEntry.


        :return: The action of this PackageHistoryEntry.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action: str):
        """Sets the action of this PackageHistoryEntry.


        :param action: The action of this PackageHistoryEntry.
        :type action: str
        """
        allowed_values = ["CREATE", "UPDATE", "DOWNLOAD", "RATE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action
