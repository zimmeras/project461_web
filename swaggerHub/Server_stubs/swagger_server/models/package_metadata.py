# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.package_id import PackageID  # noqa: F401,E501
from swagger_server.models.package_name import PackageName  # noqa: F401,E501
from swagger_server import util


class PackageMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: PackageName=None, version: str=None, id: PackageID=None):  # noqa: E501
        """PackageMetadata - a model defined in Swagger

        :param name: The name of this PackageMetadata.  # noqa: E501
        :type name: PackageName
        :param version: The version of this PackageMetadata.  # noqa: E501
        :type version: str
        :param id: The id of this PackageMetadata.  # noqa: E501
        :type id: PackageID
        """
        self.swagger_types = {
            'name': PackageName,
            'version': str,
            'id': PackageID
        }

        self.attribute_map = {
            'name': 'Name',
            'version': 'Version',
            'id': 'ID'
        }
        self._name = name
        self._version = version
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'PackageMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PackageMetadata of this PackageMetadata.  # noqa: E501
        :rtype: PackageMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> PackageName:
        """Gets the name of this PackageMetadata.


        :return: The name of this PackageMetadata.
        :rtype: PackageName
        """
        return self._name

    @name.setter
    def name(self, name: PackageName):
        """Sets the name of this PackageMetadata.


        :param name: The name of this PackageMetadata.
        :type name: PackageName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self) -> str:
        """Gets the version of this PackageMetadata.

        Package version  # noqa: E501

        :return: The version of this PackageMetadata.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this PackageMetadata.

        Package version  # noqa: E501

        :param version: The version of this PackageMetadata.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def id(self) -> PackageID:
        """Gets the id of this PackageMetadata.


        :return: The id of this PackageMetadata.
        :rtype: PackageID
        """
        return self._id

    @id.setter
    def id(self, id: PackageID):
        """Sets the id of this PackageMetadata.


        :param id: The id of this PackageMetadata.
        :type id: PackageID
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id
