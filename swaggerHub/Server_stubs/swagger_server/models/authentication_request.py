# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server.models.user_authentication_info import UserAuthenticationInfo  # noqa: F401,E501
from swagger_server import util


class AuthenticationRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user: User=None, secret: UserAuthenticationInfo=None):  # noqa: E501
        """AuthenticationRequest - a model defined in Swagger

        :param user: The user of this AuthenticationRequest.  # noqa: E501
        :type user: User
        :param secret: The secret of this AuthenticationRequest.  # noqa: E501
        :type secret: UserAuthenticationInfo
        """
        self.swagger_types = {
            'user': User,
            'secret': UserAuthenticationInfo
        }

        self.attribute_map = {
            'user': 'User',
            'secret': 'Secret'
        }
        self._user = user
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt) -> 'AuthenticationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuthenticationRequest of this AuthenticationRequest.  # noqa: E501
        :rtype: AuthenticationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self) -> User:
        """Gets the user of this AuthenticationRequest.


        :return: The user of this AuthenticationRequest.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user: User):
        """Sets the user of this AuthenticationRequest.


        :param user: The user of this AuthenticationRequest.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def secret(self) -> UserAuthenticationInfo:
        """Gets the secret of this AuthenticationRequest.


        :return: The secret of this AuthenticationRequest.
        :rtype: UserAuthenticationInfo
        """
        return self._secret

    @secret.setter
    def secret(self, secret: UserAuthenticationInfo):
        """Sets the secret of this AuthenticationRequest.


        :param secret: The secret of this AuthenticationRequest.
        :type secret: UserAuthenticationInfo
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret
