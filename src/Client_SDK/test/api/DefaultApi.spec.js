/*
 * ECE 461 - Spring 2023 - Project 2
 * API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
 *
 * OpenAPI spec version: 2.0.0
 * Contact: davisjam@purdue.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Ece461Spring2023Project2);
  }
}(this, function(expect, Ece461Spring2023Project2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Ece461Spring2023Project2.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('createAuthToken', function() {
        it('should call createAuthToken successfully', function(done) {
          // TODO: uncomment, update parameter values for createAuthToken call and complete the assertions
          /*

          instance.createAuthToken(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Ece461Spring2023Project2.AuthenticationToken);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('packageByNameDelete', function() {
        it('should call packageByNameDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for packageByNameDelete call
          /*
          var opts = {};

          instance.packageByNameDelete(name, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('packageByNameGet', function() {
        it('should call packageByNameGet successfully', function(done) {
          // TODO: uncomment, update parameter values for packageByNameGet call and complete the assertions
          /*
          var opts = {};

          instance.packageByNameGet(name, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Ece461Spring2023Project2.PackageHistoryEntry);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('packageByRegExGet', function() {
        it('should call packageByRegExGet successfully', function(done) {
          // TODO: uncomment, update parameter values for packageByRegExGet call and complete the assertions
          /*
          var opts = {};

          instance.packageByRegExGet(body, regex, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Ece461Spring2023Project2.PackageMetadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('packageCreate', function() {
        it('should call packageCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for packageCreate call and complete the assertions
          /*

          instance.packageCreate(body, xAuthorization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Ece461Spring2023Project2.ModelPackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('packageDelete', function() {
        it('should call packageDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for packageDelete call
          /*
          var opts = {};

          instance.packageDelete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('packageRate', function() {
        it('should call packageRate successfully', function(done) {
          // TODO: uncomment, update parameter values for packageRate call and complete the assertions
          /*
          var opts = {};

          instance.packageRate(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Ece461Spring2023Project2.PackageRating);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('packageRetrieve', function() {
        it('should call packageRetrieve successfully', function(done) {
          // TODO: uncomment, update parameter values for packageRetrieve call and complete the assertions
          /*
          var opts = {};

          instance.packageRetrieve(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Ece461Spring2023Project2.ModelPackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('packageUpdate', function() {
        it('should call packageUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for packageUpdate call
          /*
          var opts = {};

          instance.packageUpdate(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('packagesList', function() {
        it('should call packagesList successfully', function(done) {
          // TODO: uncomment, update parameter values for packagesList call and complete the assertions
          /*
          var opts = {};

          instance.packagesList(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Ece461Spring2023Project2.PackageMetadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('registryReset', function() {
        it('should call registryReset successfully', function(done) {
          // TODO: uncomment, update parameter values for registryReset call
          /*
          var opts = {};

          instance.registryReset(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
