/*
 * ECE 461 - Spring 2023 - Project 2
 * API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
 *
 * OpenAPI spec version: 2.0.0
 * Contact: davisjam@purdue.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AuthenticationRequest} from '../model/AuthenticationRequest';
import {AuthenticationToken} from '../model/AuthenticationToken';
import {EnumerateOffset} from '../model/EnumerateOffset';
import {Error} from '../model/Error';
import {ModelPackage} from '../model/ModelPackage';
import {PackageData} from '../model/PackageData';
import {PackageHistoryEntry} from '../model/PackageHistoryEntry';
import {PackageID} from '../model/PackageID';
import {PackageMetadata} from '../model/PackageMetadata';
import {PackageName} from '../model/PackageName';
import {PackageQuery} from '../model/PackageQuery';
import {PackageRating} from '../model/PackageRating';
import {PackageRegEx} from '../model/PackageRegEx';

/**
* Default service.
* @module api/DefaultApi
* @version 2.0.0
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createAuthToken operation.
     * @callback moduleapi/DefaultApi~createAuthTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationToken{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an access token.
     * @param {module:model/AuthenticationRequest} body 
     * @param {module:api/DefaultApi~createAuthTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createAuthToken(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthToken");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthenticationToken;

      return this.apiClient.callApi(
        '/authenticate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packageByNameDelete operation.
     * @callback moduleapi/DefaultApi~packageByNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all versions of this package.
     * @param {module:model/PackageName} name 
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationToken} opts.xAuthorization 
     * @param {module:api/DefaultApi~packageByNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageByNameDelete(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling packageByNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Authorization': opts['xAuthorization']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/package/byName/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packageByNameGet operation.
     * @callback moduleapi/DefaultApi~packageByNameGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackageHistoryEntry>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the history of this package (all versions).
     * @param {module:model/PackageName} name 
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationToken} opts.xAuthorization 
     * @param {module:api/DefaultApi~packageByNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    packageByNameGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling packageByNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Authorization': opts['xAuthorization']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PackageHistoryEntry];

      return this.apiClient.callApi(
        '/package/byName/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packageByRegExGet operation.
     * @callback moduleapi/DefaultApi~packageByRegExGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackageMetadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get any packages fitting the regular expression.
     * Search for a package using regular expression over package names and READMEs. This is similar to search by name.
     * @param {String} body 
     * @param {module:model/PackageRegEx} regex 
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationToken} opts.xAuthorization 
     * @param {module:api/DefaultApi~packageByRegExGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    packageByRegExGet(body, regex, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling packageByRegExGet");
      }
      // verify the required parameter 'regex' is set
      if (regex === undefined || regex === null) {
        throw new Error("Missing the required parameter 'regex' when calling packageByRegExGet");
      }

      let pathParams = {
        'regex': regex
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Authorization': opts['xAuthorization']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PackageMetadata];

      return this.apiClient.callApi(
        '/package/byRegEx/{regex}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packageCreate operation.
     * @callback moduleapi/DefaultApi~packageCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelPackage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PackageData} body 
     * @param {module:model/AuthenticationToken} xAuthorization 
     * @param {module:api/DefaultApi~packageCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    packageCreate(body, xAuthorization, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling packageCreate");
      }
      // verify the required parameter 'xAuthorization' is set
      if (xAuthorization === undefined || xAuthorization === null) {
        throw new Error("Missing the required parameter 'xAuthorization' when calling packageCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Authorization': xAuthorization
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelPackage;

      return this.apiClient.callApi(
        '/package', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packageDelete operation.
     * @callback moduleapi/DefaultApi~packageDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete this version of the package.
     * @param {module:model/PackageID} id Package ID
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationToken} opts.xAuthorization 
     * @param {module:api/DefaultApi~packageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling packageDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Authorization': opts['xAuthorization']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/package/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packageRate operation.
     * @callback moduleapi/DefaultApi~packageRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageRating{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PackageID} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationToken} opts.xAuthorization 
     * @param {module:api/DefaultApi~packageRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    packageRate(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling packageRate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Authorization': opts['xAuthorization']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageRating;

      return this.apiClient.callApi(
        '/package/{id}/rate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packageRetrieve operation.
     * @callback moduleapi/DefaultApi~packageRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelPackage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Interact with the package with this ID
     * Return this package.
     * @param {module:model/PackageID} id ID of package to fetch
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationToken} opts.xAuthorization 
     * @param {module:api/DefaultApi~packageRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    packageRetrieve(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling packageRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Authorization': opts['xAuthorization']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelPackage;

      return this.apiClient.callApi(
        '/package/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packageUpdate operation.
     * @callback moduleapi/DefaultApi~packageUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update this content of the package.
     * The name, version, and ID must match.  The package contents (from PackageData) will replace the previous contents.
     * @param {module:model/ModelPackage} body 
     * @param {module:model/PackageID} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationToken} opts.xAuthorization 
     * @param {module:api/DefaultApi~packageUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageUpdate(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling packageUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling packageUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Authorization': opts['xAuthorization']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/package/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the packagesList operation.
     * @callback moduleapi/DefaultApi~packagesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackageMetadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the packages from the registry.
     * Get any packages fitting the query. Search for packages satisfying the indicated query.  If you want to enumerate all packages, provide an array with a single PackageQuery whose name is \&quot;*\&quot;.  The response is paginated; the response header includes the offset to use in the next query.
     * @param {Array.<module:model/PackageQuery>} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationToken} opts.xAuthorization 
     * @param {module:model/EnumerateOffset} opts.offset Provide this for pagination. If not provided, returns the first page of results.
     * @param {module:api/DefaultApi~packagesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    packagesList(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling packagesList");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'offset': opts['offset']
      };
      let headerParams = {
        'X-Authorization': opts['xAuthorization']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PackageMetadata];

      return this.apiClient.callApi(
        '/packages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the registryReset operation.
     * @callback moduleapi/DefaultApi~registryResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the registry
     * Reset the registry to a system default state.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationToken} opts.xAuthorization 
     * @param {module:api/DefaultApi~registryResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registryReset(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Authorization': opts['xAuthorization']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reset', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}